#!/bin/bash

set -eu
set -o pipefail

# Uncomment this if bosh cli v2 is named boshgo in your PATH
# bosh() { boshgo "$@"; }

tests_dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
repo_dir="$tests_dir/.."

focus_test="${1:-}"
stemcell_os="${TEST_STEMCELL_OS:-ubuntu-trusty}"
release_name="$( bosh interpolate --path /final_name "$repo_dir/config/final.yml" )"

export BOSH_DEPLOYMENT="${BOSH_DEPLOYMENT:-$release_name-test}"

cd "$repo_dir"

true ; echo "===> creating release"
bosh create-release --force

echo ; echo "===> uploading release"
bosh upload-release

echo ; echo "===> starting tests"

REM() { echo; echo "~~~> $@"; }
failed() { echo; echo "FAILURE: $@"; exit 1; }

for test_dir in $( find "$tests_dir" -type d -depth 1 ); do
  test_name="$( basename "$test_dir" )"

  if [[ "$focus_test" != "" ]] && [[ "$focus_test" != "$test_name" ]]; then
    continue
  fi

  echo ; echo "---> testing $test_name"

  REM deploying
  bosh -n deploy \
    --recreate \
    --no-redact \
    --var deployment="$BOSH_DEPLOYMENT" \
    --var release="$release_name" \
    --var stemcell_os="$stemcell_os" \
    --ops-file="$test_dir/manifest-ops.yml" \
    "$tests_dir/manifest.yml"

  for test_cmd in $( find "$test_dir" -name "test-*" ); do
    ( set -eu; set -o pipefail; source "$test_cmd" )
  done
done

echo ; echo "===> cleanup"
bosh -n delete-deployment

echo ; echo "===> done"
